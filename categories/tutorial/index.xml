<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Eric&#39;s Web.site</title>
    <link>https://ericsweb.site/categories/tutorial/</link>
    <description>Recent content in Tutorial on Eric&#39;s Web.site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Mar 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ericsweb.site/categories/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Duplicity: The Best Free Backup Software</title>
      <link>https://ericsweb.site/2018/03/07/Duplicity/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ericsweb.site/2018/03/07/Duplicity/</guid>
      <description>Lately, I&amp;rsquo;ve been looking into backups a lot. At one point, I even looked into setting up a Time Machine Server on my FreeBSD machine. That said, it&amp;rsquo;s all been a headache that sometimes works and sometimes doesn&amp;rsquo;t. Now, however, I&amp;rsquo;ve discovered Duplicity, a GPL software package, powered by python, that is feature-heavy, simple, reliable, and fast.
Features of Duplicity #  Relatively easy to automate Encrypts your backups by default Compresses your backups by default Takes incremental backups Can self-heal if a backup goes wrong Allows incremental restoration from backups Supports a lot of different protocols Supports AWS S3 very well by default.</description>
    </item>
    
    <item>
      <title>How to Create a Time Machine Server with FreeBSD</title>
      <link>https://ericsweb.site/2017/12/12/Time-Machine-with-FreeBSD/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ericsweb.site/2017/12/12/Time-Machine-with-FreeBSD/</guid>
      <description>Running a time machine server has historically been a pain. Which sucks, because it&amp;rsquo;s actually a pretty good backup system. For the uninitiated, Time Machine is the built-in backup system on macOS. It keeps incremental backups, which means you can restore your machine to an hour ago, a week ago, a month ago, a year ago, and various increments in between. However, running one tends to suck, because there have historically been two options for doing it.</description>
    </item>
    
    <item>
      <title>How to Make a Basic rc.d Script in FreeBSD</title>
      <link>https://ericsweb.site/2017/03/28/FreeBSD-rcd-Setup/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ericsweb.site/2017/03/28/FreeBSD-rcd-Setup/</guid>
      <description>Recently, I wanted to make an rc.d script for my FreeBSD server, in order to include TeamCity in the service interface, which in FreeBSD is linked to the rc.d system, as opposed to Linux&amp;rsquo;s systemd system. I was unable to find an easy tutorial, until I stumbled upon a Minecraft forum where I found information on a suitable script. The rc.d system is actually rather nice to work with, and in my opinion, confers more power to the user than does systemd.</description>
    </item>
    
    <item>
      <title>Automatically Adding Screenshots to Photos in MacOS</title>
      <link>https://ericsweb.site/2017/03/19/MacOS-Screenshots-AddToPhotos/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ericsweb.site/2017/03/19/MacOS-Screenshots-AddToPhotos/</guid>
      <description>I take a lot of screenshots. I use them for my website, for memory, for laughs, and a lot more. However, I also take lots of screenshots on my phone. So it winds up being really weird (and inconvenient) when the screenshots on my computer and the screenshots on my phone are organized differently and in completely different places.
So naturally, being the procrastinating programmer I am, I engineered a solution to consolidate everything in one nice, organized package.</description>
    </item>
    
    <item>
      <title>Setting up Simple Continuous Integration for iOS Development with XCode</title>
      <link>https://ericsweb.site/2017/03/07/XCode-CI-Article/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ericsweb.site/2017/03/07/XCode-CI-Article/</guid>
      <description>Setting up reliable continuous integration (CI) for XCode can be a nightmare. I personally wrestled with the problem for a long while, eventually finding a somewhat convoluted workaround to make it work. However, I&amp;rsquo;ve since found a way to develop and maintain a reliable CI solution. Following is how you can whip together something similar.
In this guide, you&amp;rsquo;ll find a start-to-finish CI solution for an XCode project.
Vocabulary # If you&amp;rsquo;re familiar with CI, you can probably skip this (short) section.</description>
    </item>
    
    <item>
      <title>How to use Avahi to advertise an HTTP service</title>
      <link>https://ericsweb.site/2016/09/26/Avahi-HTTP-Service/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ericsweb.site/2016/09/26/Avahi-HTTP-Service/</guid>
      <description>This is a simple guide to how to set up avahi to advertise an HTTP service that a web browser (in this case, Safari&amp;rsquo;s Bonjour) can detect and hook into.
Background: This is running on a server running FreeBSD 10.3.0. Avahi was installed using pkg and set up with the default configuration. It is used largely as a sandbox for experimenting, as well as being a media/file server and a light webserver.</description>
    </item>
    
  </channel>
</rss>
